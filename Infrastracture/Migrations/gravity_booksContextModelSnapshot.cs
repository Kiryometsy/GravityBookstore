// <auto-generated />
using System;
using Infrastracture.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastracture.Migrations
{
    [DbContext(typeof(gravity_booksContext))]
    partial class gravity_booksContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppCore.Models.address", b =>
                {
                    b.Property<int>("address_id")
                        .HasColumnType("integer");

                    b.Property<string>("city")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("country_id")
                        .HasColumnType("integer");

                    b.Property<string>("street_name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("street_number")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("address_id")
                        .HasName("pk_address");

                    b.HasIndex("country_id");

                    b.ToTable("address");
                });

            modelBuilder.Entity("AppCore.Models.address_status", b =>
                {
                    b.Property<int>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("address_status1")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("address_status");

                    b.HasKey("status_id")
                        .HasName("pk_addr_status");

                    b.ToTable("address_status");
                });

            modelBuilder.Entity("AppCore.Models.author", b =>
                {
                    b.Property<int>("author_id")
                        .HasColumnType("integer");

                    b.Property<string>("author_name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.HasKey("author_id")
                        .HasName("pk_author");

                    b.ToTable("author");
                });

            modelBuilder.Entity("AppCore.Models.book", b =>
                {
                    b.Property<int>("book_id")
                        .HasColumnType("integer");

                    b.Property<string>("isbn13")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("num_pages")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("publication_date")
                        .HasColumnType("date");

                    b.Property<int?>("publisher_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.HasKey("book_id")
                        .HasName("pk_book");

                    b.HasIndex("language_id");

                    b.HasIndex("publisher_id");

                    b.ToTable("book");
                });

            modelBuilder.Entity("AppCore.Models.book_author", b =>
                {
                    b.Property<int>("book_id")
                        .HasColumnType("integer");

                    b.Property<int>("author_id")
                        .HasColumnType("integer");

                    b.HasKey("book_id", "author_id");

                    b.HasIndex("author_id");

                    b.ToTable("book_author");
                });

            modelBuilder.Entity("AppCore.Models.book_language", b =>
                {
                    b.Property<int>("language_id")
                        .HasColumnType("integer");

                    b.Property<string>("language_code")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("language_name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("language_id")
                        .HasName("pk_language");

                    b.ToTable("book_language");
                });

            modelBuilder.Entity("AppCore.Models.country", b =>
                {
                    b.Property<int>("country_id")
                        .HasColumnType("integer");

                    b.Property<string>("country_name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("country_id")
                        .HasName("pk_country");

                    b.ToTable("country");
                });

            modelBuilder.Entity("AppCore.Models.cust_order", b =>
                {
                    b.Property<int>("order_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("order_id"));

                    b.Property<int?>("customer_id")
                        .HasColumnType("integer");

                    b.Property<int?>("dest_address_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("order_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("shipping_method_id")
                        .HasColumnType("integer");

                    b.HasKey("order_id")
                        .HasName("pk_custorder");

                    b.HasIndex("customer_id");

                    b.HasIndex("dest_address_id");

                    b.HasIndex("shipping_method_id");

                    b.ToTable("cust_order");
                });

            modelBuilder.Entity("AppCore.Models.customer", b =>
                {
                    b.Property<int>("customer_id")
                        .HasColumnType("integer");

                    b.Property<string>("email")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("first_name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("last_name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("customer_id")
                        .HasName("pk_customer");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("AppCore.Models.customer_address", b =>
                {
                    b.Property<int>("customer_id")
                        .HasColumnType("integer");

                    b.Property<int>("address_id")
                        .HasColumnType("integer");

                    b.Property<int>("status_id")
                        .HasColumnType("integer");

                    b.HasKey("customer_id", "address_id")
                        .HasName("pk_custaddr");

                    b.HasIndex("address_id");

                    b.HasIndex("status_id");

                    b.ToTable("customer_address");
                });

            modelBuilder.Entity("AppCore.Models.order_history", b =>
                {
                    b.Property<int>("history_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("history_id"));

                    b.Property<int?>("order_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("status_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.HasKey("history_id")
                        .HasName("pk_orderhist");

                    b.HasIndex("order_id");

                    b.HasIndex("status_id");

                    b.ToTable("order_history");
                });

            modelBuilder.Entity("AppCore.Models.order_line", b =>
                {
                    b.Property<int>("line_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("line_id"));

                    b.Property<int?>("book_id")
                        .HasColumnType("integer");

                    b.Property<int?>("order_id")
                        .HasColumnType("integer");

                    b.Property<decimal?>("price")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.HasKey("line_id")
                        .HasName("pk_orderline");

                    b.HasIndex("book_id");

                    b.HasIndex("order_id");

                    b.ToTable("order_line");
                });

            modelBuilder.Entity("AppCore.Models.order_status", b =>
                {
                    b.Property<int>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("status_value")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("status_id")
                        .HasName("pk_orderstatus");

                    b.ToTable("order_status");
                });

            modelBuilder.Entity("AppCore.Models.publisher", b =>
                {
                    b.Property<int>("publisher_id")
                        .HasColumnType("integer");

                    b.Property<string>("publisher_name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.HasKey("publisher_id")
                        .HasName("pk_publisher");

                    b.ToTable("publisher");
                });

            modelBuilder.Entity("AppCore.Models.shipping_method", b =>
                {
                    b.Property<int>("method_id")
                        .HasColumnType("integer");

                    b.Property<decimal?>("cost")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)");

                    b.Property<string>("method_name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("method_id")
                        .HasName("pk_shipmethod");

                    b.ToTable("shipping_method");
                });

            modelBuilder.Entity("AppCore.Models.address", b =>
                {
                    b.HasOne("AppCore.Models.country", "country")
                        .WithMany("address")
                        .HasForeignKey("country_id")
                        .HasConstraintName("fk_addr_ctry");

                    b.Navigation("country");
                });

            modelBuilder.Entity("AppCore.Models.book", b =>
                {
                    b.HasOne("AppCore.Models.book_language", "language")
                        .WithMany("book")
                        .HasForeignKey("language_id")
                        .HasConstraintName("fk_book_lang");

                    b.HasOne("AppCore.Models.publisher", "publisher")
                        .WithMany("book")
                        .HasForeignKey("publisher_id")
                        .HasConstraintName("fk_book_pub");

                    b.Navigation("language");

                    b.Navigation("publisher");
                });

            modelBuilder.Entity("AppCore.Models.book_author", b =>
                {
                    b.HasOne("AppCore.Models.author", "author")
                        .WithMany("book_author")
                        .HasForeignKey("author_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppCore.Models.book", "book")
                        .WithMany("book_author")
                        .HasForeignKey("book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");

                    b.Navigation("book");
                });

            modelBuilder.Entity("AppCore.Models.cust_order", b =>
                {
                    b.HasOne("AppCore.Models.customer", "customer")
                        .WithMany("cust_order")
                        .HasForeignKey("customer_id")
                        .HasConstraintName("fk_order_cust");

                    b.HasOne("AppCore.Models.address", "dest_address")
                        .WithMany("cust_order")
                        .HasForeignKey("dest_address_id")
                        .HasConstraintName("fk_order_addr");

                    b.HasOne("AppCore.Models.shipping_method", "shipping_method")
                        .WithMany("cust_order")
                        .HasForeignKey("shipping_method_id")
                        .HasConstraintName("fk_order_ship");

                    b.Navigation("customer");

                    b.Navigation("dest_address");

                    b.Navigation("shipping_method");
                });

            modelBuilder.Entity("AppCore.Models.customer_address", b =>
                {
                    b.HasOne("AppCore.Models.address", "address")
                        .WithMany("customer_address")
                        .HasForeignKey("address_id")
                        .IsRequired()
                        .HasConstraintName("fk_ca_addr");

                    b.HasOne("AppCore.Models.customer", "customer")
                        .WithMany("customer_address")
                        .HasForeignKey("customer_id")
                        .IsRequired()
                        .HasConstraintName("fk_ca_cust");

                    b.HasOne("AppCore.Models.address_status", "status")
                        .WithMany("customer_adress")
                        .HasForeignKey("status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("address");

                    b.Navigation("customer");

                    b.Navigation("status");
                });

            modelBuilder.Entity("AppCore.Models.order_history", b =>
                {
                    b.HasOne("AppCore.Models.cust_order", "order")
                        .WithMany("order_history")
                        .HasForeignKey("order_id")
                        .HasConstraintName("fk_oh_order");

                    b.HasOne("AppCore.Models.order_status", "status")
                        .WithMany("order_history")
                        .HasForeignKey("status_id")
                        .HasConstraintName("fk_oh_status");

                    b.Navigation("order");

                    b.Navigation("status");
                });

            modelBuilder.Entity("AppCore.Models.order_line", b =>
                {
                    b.HasOne("AppCore.Models.book", "book")
                        .WithMany("order_line")
                        .HasForeignKey("book_id")
                        .HasConstraintName("fk_ol_book");

                    b.HasOne("AppCore.Models.cust_order", "order")
                        .WithMany("order_line")
                        .HasForeignKey("order_id")
                        .HasConstraintName("fk_ol_order");

                    b.Navigation("book");

                    b.Navigation("order");
                });

            modelBuilder.Entity("AppCore.Models.address", b =>
                {
                    b.Navigation("cust_order");

                    b.Navigation("customer_address");
                });

            modelBuilder.Entity("AppCore.Models.address_status", b =>
                {
                    b.Navigation("customer_adress");
                });

            modelBuilder.Entity("AppCore.Models.author", b =>
                {
                    b.Navigation("book_author");
                });

            modelBuilder.Entity("AppCore.Models.book", b =>
                {
                    b.Navigation("book_author");

                    b.Navigation("order_line");
                });

            modelBuilder.Entity("AppCore.Models.book_language", b =>
                {
                    b.Navigation("book");
                });

            modelBuilder.Entity("AppCore.Models.country", b =>
                {
                    b.Navigation("address");
                });

            modelBuilder.Entity("AppCore.Models.cust_order", b =>
                {
                    b.Navigation("order_history");

                    b.Navigation("order_line");
                });

            modelBuilder.Entity("AppCore.Models.customer", b =>
                {
                    b.Navigation("cust_order");

                    b.Navigation("customer_address");
                });

            modelBuilder.Entity("AppCore.Models.order_status", b =>
                {
                    b.Navigation("order_history");
                });

            modelBuilder.Entity("AppCore.Models.publisher", b =>
                {
                    b.Navigation("book");
                });

            modelBuilder.Entity("AppCore.Models.shipping_method", b =>
                {
                    b.Navigation("cust_order");
                });
#pragma warning restore 612, 618
        }
    }
}
